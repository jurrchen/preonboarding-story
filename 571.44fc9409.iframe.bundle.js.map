{"version":3,"file":"571.44fc9409.iframe.bundle.js","mappings":";;;;;;;AAWA;;;;;;;;;ACEA;AACA;;;;;;;;;;;;;;;;ACAA;;;;;AAOA;;;;AAMA;;;;;;;;;AAWA;;;;;;;;;AChCA;;AAEA;;;AAKA;;AAEA;AACA;;;;;;;;;AAWA;;;;;AAKA;;;;;AAKA;;;;;;AAMA;AACA;;;AAGA;;AAIA;AACA;;;;;;;;AAUA;;;;;AAOA;;;;;;;AChEA;;;;;ACGA;;;;;;;;;ACAA;AACA;;;AAGA;AAGA;AACA;AACA;AACA;;;;AAMA;;AAIA;;;;;AAOA;;;;;;;;;AAWA;;;;;;;;;AASA;AAGA;;AAEA;;AAEA;;AAIA;;AAEA;;;AAGA;AACA;;;;;;AAUA;;AC9DA;;;ACdA;;;;AAMA;;;;;;AAQA;;;AAGA","sources":["webpack://keycloakify-starter/./src/components/BackButton/styled.ts","webpack://keycloakify-starter/./src/components/BaseContent/styled.ts","webpack://keycloakify-starter/./src/components/FormLayout/styled.ts","webpack://keycloakify-starter/./src/components/Select/styled.ts","webpack://keycloakify-starter/./src/components/Select/Select.tsx","webpack://keycloakify-starter/./src/components/CountrySelect/styled.ts","webpack://keycloakify-starter/./src/components/TileSelect/styled.ts","webpack://keycloakify-starter/./src/components/TileSelect/TileSelect.tsx","webpack://keycloakify-starter/./src/components/PreOnboardingForm/components/Form/styled.ts"],"sourcesContent":["import styled from 'styled-components'\nimport { Colors } from 'utils/colors'\nimport { ButtonClean } from '../ButtonClean'\n\nexport const Container = styled(ButtonClean)`\n  display: flex;\n  align-items: center;\n  gap: 8px;\n  font-weight: 400;\n  font-size: 16px;\n  line-height: 150%;\n  color: ${Colors.GS600};\n  text-decoration: none;\n  align-self: flex-start;\n`\n","import styled from 'styled-components'\n\nimport type { BaseContentProps } from './BaseContent'\n\nexport const Container = styled.div<{\n  appearance: NonNullable<BaseContentProps['appearance']>\n  size: NonNullable<BaseContentProps['size']>\n}>`\n  font-size: 16px;\n  line-height: 150%;\n  margin: 0;\n  padding: 0;\n\n  color: ${({ appearance }) => ({ base: '#10110D', secondary: '#6F6F69' })[appearance]};\n  font-size: ${({ size }) => `${{ base: 16, small: 14 }[size]}px`};\n\n  a {\n    text-decoration: underline;\n  }\n`\n","import styled from 'styled-components'\nimport { Colors } from 'utils/colors'\n\nexport const Form = styled.form`\n  display: flex;\n  flex-flow: column nowrap;\n  max-width: calc(100vw - 48px);\n  width: 384px;\n  position: relative;\n  gap: 24px;\n\n  h1 {\n    margin: 0;\n  }\n`\n\nexport const HeadingContainer = styled.div`\n  word-wrap: break-word;\n  display: flex;\n  flex-direction: column;\n  gap: 12px;\n`\n\nexport const Content = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 16px;\n`\n\nexport const LoadingWrapper = styled.div`\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  background: ${Colors.GS100}80;\n  z-index: 1;\n`\n","import styled, { css } from 'styled-components'\nimport { Colors } from '../../utils/colors'\n\nexport const Container = styled.div<{ error: boolean }>`\n  position: relative;\n  height: 56px;\n  background: ${Colors.GS0};\n\n  ${({ error }) =>\n    error &&\n    css`\n      & > select,\n      & > p {\n        color: ${Colors.R300};\n      }\n    `};\n`\n\nexport const SelectInput = styled.select<{ withPrefix?: boolean }>`\n  position: absolute;\n  left: 0;\n  top: 0;\n  height: 100%;\n  width: 100%;\n  padding-left: 16px;\n  padding-right: 42px;\n  padding-top: 18px;\n  border: 1px solid ${Colors.GS500};\n  font-size: 16px;\n  border-radius: 0;\n  appearance: none;\n  background: none;\n  color: ${Colors.GS1000};\n  cursor: pointer;\n\n  &:focus {\n    outline: none;\n    border-color: ${Colors.GS1000};\n  }\n\n  &:disabled {\n    cursor: default;\n    opacity: 1;\n    background: ${Colors.GS200};\n    border: 1px solid ${Colors.GS500};\n  }\n\n  ${({ withPrefix }) =>\n    withPrefix &&\n    css`\n      padding-left: 40px;\n    `};\n`\n\nexport const Input = styled.div`\n  position: absolute;\n  left: 0;\n  top: 0;\n  width: 100%;\n  height: 100%;\n  pointer-events: none;\n  z-index: 1;\n`\n\nexport const SelectArrow = styled.div`\n  position: absolute;\n  top: 50%;\n  transform: translateY(-50%);\n  right: 16px;\n`\n\nexport const Prefix = styled.div`\n  position: absolute;\n  top: 50%;\n  transform: translateY(-50%);\n  left: 15px;\n  padding-top: 18px;\n  max-width: 18px;\n`\n","import { Input } from '../Input'\nimport { ReactComponent as Arrow } from './assets/arrow-short-down.svg'\nimport * as S from './styled'\nimport type { SelectProps } from './types'\n\nexport const Select = <TFormValues extends Record<string, unknown>>({\n  options,\n  label,\n  name,\n  errors,\n  defaultValue,\n  disabled = false,\n  value,\n  register,\n  rules,\n  prefix,\n  ...props\n}: SelectProps<TFormValues>): JSX.Element => {\n  const hasError = !!(errors && errors[name])\n  const hasValue = !!value?.length || !!defaultValue?.length\n\n  const renderOptions = () => {\n    return (\n      <>\n        <option hidden disabled value=\"\" />\n        {options.map((item) => (\n          <option key={item.key ?? item.value} value={item.value} disabled={item.disabled}>\n            {item.label}\n          </option>\n        ))}\n      </>\n    )\n  }\n\n  return (\n    <S.Container error={hasError}>\n      <S.Input aria-hidden=\"true\">\n        {!!prefix && <S.Prefix>{prefix}</S.Prefix>}\n        <Input.Label hasValue={hasValue}>{label}</Input.Label>\n        <S.SelectArrow>\n          <Arrow />\n        </S.SelectArrow>\n      </S.Input>\n      <S.SelectInput\n        disabled={disabled}\n        name={name}\n        defaultValue={defaultValue}\n        withPrefix={!!prefix}\n        {...props}\n        {...(register && register(name, rules))}\n      >\n        {renderOptions()}\n      </S.SelectInput>\n    </S.Container>\n  )\n}\n","import styled from 'styled-components'\nimport { Colors } from 'utils/colors'\n\nexport const FlagWrapper = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  width: 18px;\n  border: 1px solid ${Colors.GS300};\n\n  svg {\n    width: inherit;\n  }\n`\n","import styled, { css } from 'styled-components'\nimport { Colors } from 'utils/colors'\nimport { ReactComponent as Tick } from './assets/tick.svg'\n\nexport const Container = styled.div<{ error?: boolean }>`\n  display: grid;\n  grid-template-columns: 1fr 1fr;\n  grid-auto-rows: auto;\n  background-color: ${Colors.GS500};\n  border: 1px solid ${Colors.GS500};\n  grid-gap: 1px;\n\n  ${({ error }) =>\n    error &&\n    css`\n      background-color: ${Colors.R300};\n      border-color: ${Colors.R300};\n    `};\n`\n\nexport const OptionTickImage = styled(Tick)`\n  position: absolute;\n  top: 5px;\n  left: 5px;\n`\n\nexport const OptionImageContainer = styled.div`\n  margin-right: 8px;\n`\n\nexport const OptionImage = styled.img`\n  display: block;\n  width: 24px;\n  height: 24px;\n  -webkit-user-drag: none;\n`\n\nexport const OptionLabel = styled.label<{ active: boolean; disabled: boolean }>`\n  flex: 0 0 50%;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  cursor: pointer;\n  outline-offset: -1px;\n\n  height: 56px;\n  background: ${Colors.GS0};\n\n  font-weight: 600;\n  font-size: 16px;\n  line-height: 150%;\n  text-align: center;\n\n  position: relative;\n\n  ${({ disabled }) =>\n    disabled &&\n    css`\n      background: ${Colors.GS200};\n      pointer-events: none;\n    `};\n\n  ${({ active, disabled }) =>\n    active &&\n    css`\n      z-index: 1;\n      outline: 2px solid ${disabled ? Colors.GS600 : Colors.GS1000};\n\n      ${OptionTickImage} {\n        display: block;\n      }\n    `};\n`\n\nexport const OptionInput = styled.input``\n\nexport const Label = styled.label`\n  & > span {\n    display: block;\n    margin-bottom: 8px;\n    font-size: 16px;\n    line-height: 150%;\n    color: ${Colors.GS600};\n  }\n`\n","import type { KeyboardEvent, ReactNode } from 'react'\nimport { Input } from '../Input'\nimport * as S from './styled'\n\ntype TileSelectOption = {\n  label: string\n  value: string\n  image?: string\n}\n\ntype TileSelectProps = {\n  name: string\n  error?: string\n  disabled?: boolean\n  label?: ReactNode\n  options: TileSelectOption[]\n  value: string | undefined\n  onChange: (value: string) => void\n}\n\nexport const TileSelect = ({\n  name,\n  error,\n  label,\n  options,\n  disabled = false,\n  value,\n  onChange,\n}: TileSelectProps) => {\n  const handleKeyPress = (event: KeyboardEvent<HTMLLabelElement>, value: string) => {\n    if (event.key === 'Enter') {\n      onChange(value)\n    }\n  }\n\n  return (\n    <>\n      {label && (\n        <S.Label>\n          <span>{label}</span>\n        </S.Label>\n      )}\n      <S.Container error={!!error}>\n        {options.map((option) => {\n          const id = `${name}.${option.value}`\n\n          return (\n            <S.OptionLabel\n              key={option.value}\n              htmlFor={id}\n              tabIndex={0}\n              disabled={disabled}\n              active={option.value === value}\n              onKeyPress={(event: KeyboardEvent<HTMLLabelElement>) =>\n                handleKeyPress(event, option.value)\n              }\n            >\n              <S.OptionInput\n                id={id}\n                type=\"radio\"\n                name={name}\n                value={option.value}\n                data-selected={option.value === value}\n                hidden\n                onClick={() => {\n                  onChange(option.value)\n                }}\n              />\n              {option.value === value && <S.OptionTickImage />}\n              {option.image && (\n                <S.OptionImageContainer>\n                  <S.OptionImage src={option.image} alt={option.label} />\n                </S.OptionImageContainer>\n              )}\n              <div>{option.label}</div>\n            </S.OptionLabel>\n          )\n        })}\n      </S.Container>\n      {!!error && <Input.Error>{error}</Input.Error>}\n    </>\n  )\n}\n","import styled from 'styled-components'\nimport { Colors } from 'utils/colors'\n\nexport const LabelWrapper = styled.div`\n  margin-top: 8px;\n  margin-bottom: -4px;\n`\n\nexport const Label = styled.p`\n  font-size: 16px;\n  font-weight: 600;\n  line-height: 150%;\n`\n\nexport const EmptyState = styled.div`\n  font-size: 16px;\n  line-height: 150%;\n\n  span {\n    font-size: 14px;\n    color: ${Colors.GS600};\n    font-weight: 500;\n  }\n`\n\nexport const SearchedChannelImage = styled.div`\n  height: 30px;\n  width: 30px;\n  border-radius: 100%;\n  overflow: hidden;\n  flex-shrink: 0;\n\n  img {\n    width: 100%;\n    height: 100%;\n    object-fit: cover;\n  }\n`\n"],"names":[],"sourceRoot":""}