{"version":3,"file":"main.15b8dd6f.iframe.bundle.js","mappings":";;;;;;;;;;;;;;;;AAmBA;;;;;;AAMA;;;AAGA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+DA;;AAEA;;;;AAIA;;AAEA;;;;;;ACjEA;AACA;AACA;;;;;;;;AAQA;AACA;AACA;;;;;;;;AAQA;AACA;AACA;;;;;;;;AAQA;AACA;AACA;;;;;;;;AAQA;AACA;AACA;;;;;;;;AAQA;AACA;AACA;;;;;;;;AAQA;AACA;AACA;;;;;;;;AAQA;AACA;AACA;;;;;;;;;AASA;AACA;;;;;;;;;;;;;ACvGA;;;;AAIA;AAGA;AACA;;;AAGA;;;;;ACjBA;;;AAGA;;;;;;;AAOA;;;;AAIA;;;AAGA;;;;;;AAQA;AAGA;AACA;;;;;;AAQA;AAGA;;AC1BA;;;;;ACjBA;;;;;;;;;;;;AA0GA;AA1GA;AA4GA;;AA5GA;AA+GA;AACA;;;;;AAhHA;AAsHA;;;;AAtHA;AA2HA;;;AAGA;;;;;;AAQA;;AAEA;AACA;;;;AAMA;;AAIA;AACA;;;;;;;;;;;;AC9IA;;;AAKA;;;AAIA;;;AAGA;;;;;AAKA;;;AAGA;;;AAGA;;;;;;;;;;;;;;;ACpBA;;;AAKA;;AAEA;;;;AAMA;;;;;;AAQA;;AAEA;AACA;;;;;;;;;ACrCA;;;;;;ACkBA;AACA;AACA;;AAEA;;;;AAKA;;;;AAKA;AAEA;AACA;;;AAIA;AAAA;;AAOA;;AAMA;;AAMA;;AAAA;;;;;;;;;;;;;AA0DA;AApDA;AAOA;AACA;AACA;AAKA;AACA;AACA;AAKA;AACA;AACA;AAKA;AACA;AANA;;;AC5CA;;;AAKA;;AAEA;AACA;AAGA;AACA;;;;;AAWA;;;;AAMA;;AAEA;;;;AAMA;;AAEA;;;;AAMA;AACA;;;;;;AAQA;;;;;;;;;;AAYA;AAGA;;;AAGA;;AAIA;AACA;AAGA;;AAEA;;;;;AAOA;;;;;;AAMA;;AAIA;;;;AAIA;;;;;AAaA;;;;;;;;;AASA;;;;AAIA;;;;AAKA;;AAEA;;;;AAMA;;;;AAKA;;AAEA;;;;AAMA;;;AAIA;;AAEA;AAGA;AACA;;AAEA;;AAIA;;AAEA;;AAIA;AACA;;;AAKA;;AAEA;;;AAKA;;ACnOA;;;;;ACUA;;;;;;;;;;;;;;;;;;;;;ACLA;;;;;;;;;;;;;AAeA;;;;AAIA;;;;;;;;;;;;;ACrBA;;;;;AAOA;AACA;;AAIA;;;;;;;;;;;AAaA;;;;AAIA;;;;AAMA;;;;AAIA;;;AAKA;;;;;;;;AChCA;;;;AAMA;AACA;;;;AAMA;;;;;;AAQA;;;;;AA4BA;;;AAKA;AACA;;;;AC9DA;;;;AAMA;;;;AAMA;;;;;AAYA;;;;AC5BA;;;ACOA;;;;AAMA;;;;;;;;;AAWA;;;;AAMA;AACA;AACA;;;;;;;;;;;;AAcA;;;;AAYA;;;;AAAA;;;;;;ACzCA;;;AAGA;;;;AClBA","sources":["webpack://keycloakify-starter/./src/utils/GlobalStyle.tsx","webpack://keycloakify-starter/./src/assets/SuisseIntlFont/SuisseIntlFont.ts","webpack://keycloakify-starter/./src/components/AutoCompleteBox/components/Option/styled.ts","webpack://keycloakify-starter/./src/components/AutoCompleteBox/styled.ts","webpack://keycloakify-starter/./src/components/AutoCompleteBox/AutoCompleteBox.tsx","webpack://keycloakify-starter/./src/components/Button/styled.ts","webpack://keycloakify-starter/./src/components/ButtonClean/styled.ts","webpack://keycloakify-starter/./src/components/Image/styled.ts","webpack://keycloakify-starter/./src/components/Image/assets/photo.svg","webpack://keycloakify-starter/./src/components/Tooltip/styled.ts","webpack://keycloakify-starter/./src/components/Input/styled.ts","webpack://keycloakify-starter/./src/components/Input/Input.tsx","webpack://keycloakify-starter/./src/components/Loader/styled.ts","webpack://keycloakify-starter/./src/components/PreOnboardingForm/components/SocialNetworkLink/styled.ts","webpack://keycloakify-starter/./src/keycloak-theme/login/pages/RegisterNew/Layout.tsx","webpack://keycloakify-starter/./src/keycloak-theme/login/pages/RegisterNew/components/CreatorCarousel.tsx","webpack://keycloakify-starter/./src/keycloak-theme/login/pages/RegisterNew/components/StartNow.tsx","webpack://keycloakify-starter/./src/keycloak-theme/login/pages/RegisterNew/RegisterNew.tsx","webpack://keycloakify-starter/./src/keycloak-theme/login/pages/RegisterNew/components/ImageSplash.tsx","webpack://keycloakify-starter/./src/keycloak-theme/login/pages/RegisterNew/components/EnterDetails.tsx","webpack://keycloakify-starter/./src/keycloak-theme/login/pages/RegisterNew/PreonboardingNew.tsx"],"sourcesContent":["import { createGlobalStyle } from 'styled-components'\nimport { Colors } from './colors'\n\nexport const GlobalStyle = createGlobalStyle`\n  * {\n    margin: 0;\n    box-sizing: border-box;\n    border: none;\n\n    -webkit-font-smoothing: antialiased;\n    -moz-osx-font-smoothing: grayscale;\n    text-rendering: optimizeLegibility;\n  }\n\n  a {\n    text-decoration: none;\n    color: inherit;\n    \n    &:hover {\n      color: ${Colors.B500};\n      text-decoration: none;\n    }\n  }\n\n  body {\n    background: ${Colors.GS0};\n\n    font-family: \"Suisse Int'l\", Helvetica, Arial, sans-serif;\n    color: ${Colors.GS1000};\n  }\n\n  button {\n    padding: 0;\n    background: none;\n    border: none;\n\n    color: inherit;\n\n    cursor: pointer;\n  }\n\n  h1,\n  h2,\n  h3,\n  h4,\n  h5,\n  h6 {\n    margin: 0;\n\n    font-weight: 400;\n  }\n\n  img,\n  svg {\n    display: block;\n\n    user-drag: none;\n  }\n\n  fieldset {\n    border: none;\n    padding: 0;\n  }\n\n  input {\n    border-radius: 0;\n    font: inherit;\n  }\n\n  input[type='email'],\n  input[type='text'] {\n    -webkit-appearance: none;\n  }\n\n  textarea {\n    font: inherit;\n  }\n\n  label {\n    cursor: inherit;\n  }\n\n  ul,\n  ol {\n    padding: 0;\n    margin: 0;\n\n    list-style: none;\n  }\n\n  ::-moz-selection {\n    background: ${Colors.B500};\n\n    color: ${Colors.GS100};\n  }\n\n  ::selection {\n    background: ${Colors.B500};\n\n    color: ${Colors.GS100};\n  }\n`\n","// @ts-nocheck\nimport { createGlobalStyle } from 'styled-components'\n\nimport SuisseIntlBlackOtf from './assets/SuisseIntl-Black.otf'\nimport SuisseIntlBlackWoff from './assets/SuisseIntl-Black.woff'\nimport SuisseIntlBlackWoff2 from './assets/SuisseIntl-Black.woff2'\nimport SuisseIntlBoldOtf from './assets/SuisseIntl-Bold.otf'\nimport SuisseIntlBoldWoff from './assets/SuisseIntl-Bold.woff'\nimport SuisseIntlBoldWoff2 from './assets/SuisseIntl-Bold.woff2'\nimport SuisseIntlLightOtf from './assets/SuisseIntl-Light.otf'\nimport SuisseIntlLightWoff from './assets/SuisseIntl-Light.woff'\nimport SuisseIntlLightWoff2 from './assets/SuisseIntl-Light.woff2'\nimport SuisseIntlMediumOtf from './assets/SuisseIntl-Medium.otf'\nimport SuisseIntlMediumWoff from './assets/SuisseIntl-Medium.woff'\nimport SuisseIntlMediumWoff2 from './assets/SuisseIntl-Medium.woff2'\nimport SuisseIntlRegularOtf from './assets/SuisseIntl-Regular.otf'\nimport SuisseIntlRegularWoff from './assets/SuisseIntl-Regular.woff'\nimport SuisseIntlRegularWoff2 from './assets/SuisseIntl-Regular.woff2'\nimport SuisseIntlSemiBoldOtf from './assets/SuisseIntl-SemiBold.otf'\nimport SuisseIntlSemiBoldWoff from './assets/SuisseIntl-SemiBold.woff'\nimport SuisseIntlSemiBoldWoff2 from './assets/SuisseIntl-SemiBold.woff2'\nimport SuisseIntlThinOtf from './assets/SuisseIntl-Thin.otf'\nimport SuisseIntlThinWoff from './assets/SuisseIntl-Thin.woff'\nimport SuisseIntlThinWoff2 from './assets/SuisseIntl-Thin.woff2'\nimport SuisseIntlUltraLightOtf from './assets/SuisseIntl-UltraLight.otf'\nimport SuisseIntlUltraLightWoff from './assets/SuisseIntl-UltraLight.woff'\nimport SuisseIntlUltraLightWoff2 from './assets/SuisseIntl-UltraLight.woff2'\nimport SuisseIntlCondBoldItalicWoff from './assets/SuisseIntlCond-BoldItalic.woff'\nimport SuisseIntlCondBoldItalicWoff2 from './assets/SuisseIntlCond-BoldItalic.woff2'\n\nexport const SuisseIntlFont = createGlobalStyle`\n  @font-face {\n    font-family: \"Suisse Int'l\";\n    font-weight: 100;\n    src: url(${SuisseIntlUltraLightWoff2}) format('woff2'),\n      url(${SuisseIntlUltraLightWoff}) format('woff'),\n      url(${SuisseIntlUltraLightOtf}) format('opentype');\n\n    font-display: block;\n  }\n\n  @font-face {\n    font-family: \"Suisse Int'l\";\n    font-weight: 200;\n    src: url(${SuisseIntlThinWoff2}) format('woff2'),\n      url(${SuisseIntlThinWoff}) format('woff'),\n      url(${SuisseIntlThinOtf}) format('opentype');\n\n    font-display: block;\n  }\n\n  @font-face {\n    font-family: \"Suisse Int'l\";\n    font-weight: 300;\n    src: url(${SuisseIntlLightWoff2}) format('woff2'),\n      url(${SuisseIntlLightWoff}) format('woff'),\n      url(${SuisseIntlLightOtf}) format('opentype');\n\n    font-display: block;\n  }\n\n  @font-face {\n    font-family: \"Suisse Int'l\";\n    font-weight: 400;\n    src: url(${SuisseIntlRegularWoff2}) format('woff2'),\n      url(${SuisseIntlRegularWoff}) format('woff'),\n      url(${SuisseIntlRegularOtf}) format('opentype');\n\n    font-display: block;\n  }\n\n  @font-face {\n    font-family: \"Suisse Int'l\";\n    font-weight: 500;\n    src: url(${SuisseIntlMediumWoff2}) format('woff2'),\n      url(${SuisseIntlMediumWoff}) format('woff'),\n      url(${SuisseIntlMediumOtf}) format('opentype');\n\n    font-display: block;\n  }\n\n  @font-face {\n    font-family: \"Suisse Int'l\";\n    font-weight: 600;\n    src: url(${SuisseIntlSemiBoldWoff2}) format('woff2'),\n      url(${SuisseIntlSemiBoldWoff}) format('woff'),\n      url(${SuisseIntlSemiBoldOtf}) format('opentype');\n\n    font-display: block;\n  }\n\n  @font-face {\n    font-family: \"Suisse Int'l\";\n    font-weight: 700;\n    src: url(${SuisseIntlBoldWoff2}) format('woff2'),\n      url(${SuisseIntlBoldWoff}) format('woff'),\n      url(${SuisseIntlBoldOtf}) format('opentype');\n\n    font-display: block;\n  }\n\n  @font-face {\n    font-family: \"Suisse Int'l\";\n    font-weight: 900;\n    src: url(${SuisseIntlBlackWoff2}) format('woff2'),\n      url(${SuisseIntlBlackWoff}) format('woff'),\n      url(${SuisseIntlBlackOtf}) format('opentype');\n\n    font-display: block;\n  }\n\n  @font-face {\n    font-family: \"Suisse Int'l Cond\";\n    font-weight: 700;\n    font-style: italic;\n    src: url(${SuisseIntlCondBoldItalicWoff2}) format('woff2'),\n      url(${SuisseIntlCondBoldItalicWoff}) format('woff');\n\n    font-display: block;\n  }\n`\n","import styled, { css } from 'styled-components'\nimport { Colors } from '../../../../utils/colors'\nimport { mediaQueries } from '../../../../utils/breakpoints'\n\nexport const Container = styled.div<{ active?: boolean }>`\n  height: 48px;\n  display: flex;\n  align-items: center;\n  justify-content: flex-start;\n  gap: 16px;\n  background: none;\n  cursor: pointer;\n\n  ${mediaQueries('laptop')} {\n    height: 56px;\n  }\n\n  ${({ active }) =>\n    active &&\n    css`\n      background: ${Colors.GS200};\n    `}\n\n  &:hover {\n    background: ${Colors.GS200};\n  }\n`\n","import styled, { css } from 'styled-components'\nimport { mediaQueries } from '../../utils/breakpoints'\nimport { Colors } from '../../utils/colors'\n\nexport const Container = styled.div<{ transform: number }>`\n  position: absolute;\n  left: 0;\n  bottom: ${({ transform }) => `${transform}px`};\n  width: 100%;\n  background: white;\n  border: 1px solid ${Colors.GS500};\n  max-height: 200px;\n  z-index: 10;\n  padding: 4px 0;\n  overflow: auto;\n  box-shadow: rgba(100, 100, 111, 0.2) 0px -7px 29px 0px;\n\n  ${mediaQueries('laptop')} {\n    max-height: 220px;\n    padding: 8px 0;\n    bottom: auto;\n    top: ${({ transform }) => `${transform}px`};\n    box-shadow: none;\n  }\n`\n\nconst wrapperStyles = css`\n  width: 100%;\n  height: 120px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n`\n\nexport const LoadingWrapper = styled.div`\n  ${wrapperStyles};\n`\n\nexport const Options = styled.div`\n  width: 100%;\n  height: 100%;\n  overflow-y: auto;\n  display: flex;\n  flex-direction: column;\n`\n\nexport const EmptyState = styled.div`\n  ${wrapperStyles};\n  text-align: center;\n`\n","import { useDebounce } from 'hooks/useDebounce'\nimport type { MutableRefObject, ReactNode } from 'react'\nimport { useRef } from 'react'\nimport { Loader } from '../Loader'\nimport { Option } from './components/Option'\nimport * as S from './styled'\n\nexport type Props = {\n  activeOptionIndex?: number\n  inputRef: MutableRefObject<any>\n  innerRef?: MutableRefObject<HTMLDivElement | null>\n  options: {\n    value: any\n    component: ReactNode\n  }[]\n  emptyState?: ReactNode\n  value?: string\n  isLoading?: boolean\n  onSelect: (value: ReactNode) => void\n}\n\nexport const AutoCompleteBox = ({\n  isLoading,\n  emptyState,\n  value,\n  options,\n  activeOptionIndex,\n  inputRef,\n  innerRef,\n  onSelect,\n}: Props) => {\n  const boxRef = useRef<null | HTMLDivElement>(null)\n  const debouncedValue = useDebounce(value, 300)\n\n  if (!inputRef.current || (!isLoading && !emptyState && !options.length) || !value?.length) {\n    return null\n  }\n\n  // eslint-disable-next-line no-unsafe-optional-chaining\n  const { height } = inputRef.current?.getBoundingClientRect()\n\n  const renderContent = () => {\n    if (isLoading || !debouncedValue) {\n      return (\n        <S.LoadingWrapper>\n          <Loader />\n        </S.LoadingWrapper>\n      )\n    }\n\n    if (!options.length && emptyState) {\n      return <S.EmptyState>{emptyState}</S.EmptyState>\n    }\n\n    return (\n      <S.Options>\n        {options.map((option, index) => (\n          <Option\n            key={index}\n            active={index === activeOptionIndex}\n            value={option.value}\n            onClick={onSelect}\n          >\n            {option.component}\n          </Option>\n        ))}\n      </S.Options>\n    )\n  }\n\n  return (\n    <div ref={innerRef}>\n      <S.Container ref={boxRef} transform={height + 12}>\n        {renderContent()}\n      </S.Container>\n    </div>\n  )\n}\n","import styled, { css } from 'styled-components'\nimport type { ButtonProps } from './Button'\nimport { Colors } from '../../utils/colors'\n\nconst getContainerWidth = ({ fullwidth }: Pick<ButtonProps, 'fullwidth'>) => {\n  if (fullwidth) {\n    return '100%'\n  }\n}\n\nconst getContainerColor = ({ appearance, $inverted, mode }: ButtonProps) => {\n  if (appearance === 'primary') {\n    return $inverted ? Colors.B500 : Colors.GS0\n  }\n  if (appearance === 'secondary') {\n    return mode === 'dark' ? Colors.GS0 : Colors.GS1000\n  }\n}\n\nconst getContainerBorder = ({ appearance, mode }: Pick<ButtonProps, 'appearance' | 'mode'>) => {\n  if (appearance === 'secondary' && mode === 'dark') {\n    return `1px solid ${Colors.GS600}`\n  }\n\n  return 'none'\n}\n\nconst getContainerBackground = ({\n  appearance,\n  $inverted,\n  mode,\n}: Pick<ButtonProps, 'appearance' | 'mode' | '$inverted'>) => {\n  if (appearance === 'dark') {\n    return Colors.GS800\n  }\n  if (appearance === 'primary') {\n    return $inverted ? Colors.GS0 : Colors.B500\n  }\n  if (appearance === 'secondary') {\n    return mode === 'dark' ? Colors.GS1000 : Colors.GS300\n  }\n}\n\nconst getContainerHoverBackground = ({\n  appearance,\n  $inverted,\n  mode,\n}: Pick<ButtonProps, 'appearance' | 'mode' | '$inverted'>) => {\n  if (appearance === 'primary') {\n    return $inverted ? Colors.GS200 : Colors.B600\n  }\n  if (appearance === 'secondary') {\n    return mode === 'dark' ? Colors.GS800 : Colors.GS400\n  }\n}\n\nconst getContainerActiveBackground = ({\n  appearance,\n  $inverted,\n  mode,\n}: Pick<ButtonProps, 'appearance' | 'mode' | '$inverted'>) => {\n  if (appearance === 'primary') {\n    return $inverted ? Colors.GS0 : Colors.B700\n  }\n  if (appearance === 'secondary') {\n    return mode === 'dark' ? Colors.GS700 : Colors.GS300\n  }\n}\n\nconst getContainerHeight = ({ size }: ButtonProps) => {\n  if (size === 'small') {\n    return 40\n  }\n  if (size === 'medium') {\n    return 46\n  }\n  if (size === 'large') {\n    return 56\n  }\n}\n\nconst getContainerHorizontalPadding = ({ size }: ButtonProps) => {\n  if (size === 'small') {\n    return 16\n  }\n  if (size === 'medium') {\n    return 20\n  }\n  if (size === 'large') {\n    return 24\n  }\n}\n\nexport const Container = styled.button<ButtonProps>`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n\n  width: ${getContainerWidth};\n  position: relative;\n  font-size: 16px;\n  font-weight: 600;\n  line-height: 24px;\n  white-space: nowrap;\n  cursor: pointer;\n\n  appearance: none;\n  -moz-appearance: none;\n  -webkit-appearance: none;\n\n  color: ${getContainerColor};\n  border: ${getContainerBorder};\n  background-color: ${getContainerBackground};\n\n  height: ${getContainerHeight}px;\n  padding-left: ${getContainerHorizontalPadding}px;\n  padding-right: ${getContainerHorizontalPadding}px;\n  transition: background-color 0.2s linear;\n\n  &:hover,\n  &:focus {\n    background-color: ${getContainerHoverBackground};\n    color: ${getContainerColor};\n  }\n\n  &:active {\n    background-color: ${getContainerActiveBackground};\n    color: ${getContainerColor};\n  }\n\n  ${({ disabled, appearance, $inverted, mode }) =>\n    disabled &&\n    css`\n      cursor: default;\n      opacity: 0.4;\n\n      &:hover,\n      &:focus {\n        background-color: ${getContainerBackground({ appearance, $inverted, mode })};\n      }\n    `};\n`\n\nexport const Label = styled.span<ButtonProps>`\n  display: flex;\n  align-items: center;\n\n  ${({ isLoading }) =>\n    isLoading &&\n    css`\n      visibility: hidden;\n    `}\n`\n\nexport const LoaderWrapper = styled.div`\n  position: absolute;\n  left: 50%;\n  top: 50%;\n  transform: translate(-50%, -50%);\n`\n","import styled, { css } from 'styled-components'\nimport { Colors } from 'utils/colors'\n\nexport const Container = styled.button`\n  color: inherit;\n  background: none;\n  border: none;\n  text-decoration: underline;\n  cursor: pointer;\n\n  ${({ disabled }) =>\n    disabled\n      ? css`\n          cursor: default;\n          opacity: 0.4;\n        `\n      : css`\n          &:hover,\n          &:focus {\n            color: ${Colors.GS1000};\n\n            svg path {\n              stroke: ${Colors.GS1000};\n            }\n          }\n\n          &:active {\n            color: ${Colors.GS800};\n\n            svg path {\n              stroke: ${Colors.GS800};\n            }\n          }\n        `};\n\n  &:hover {\n    text-decoration: underline;\n  }\n`\n","import styled, { keyframes } from 'styled-components'\nimport { Colors } from '../../utils/colors'\n\nconst animationWave = keyframes`\n  0% {\n    background-position: 0 50%;\n  }\n  50% {\n    background-position: 100% 50%;\n  }\n  100% {\n    background-position: 0 50%;\n  }\n`\n\nexport const Container = styled.div`\n  height: 100%;\n  width: 100%;\n  background: ${Colors.GS300};\n  position: relative;\n`\n\nexport const Image = styled.img`\n  width: 100%;\n  height: 100%;\n  object-fit: cover;\n`\n\nexport const Loader = styled.div`\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  background: linear-gradient(-45deg, ${Colors.GS300}, ${Colors.GS200}, ${Colors.GS300});\n  background-size: 300% 300%;\n  animation: ${animationWave} 2s ease-in-out infinite alternate;\n`\n\nexport const PlaceholderIcon = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n`\n","var _path, _path2;\nfunction _extends() { return _extends = Object.assign ? Object.assign.bind() : function (n) { for (var e = 1; e < arguments.length; e++) { var t = arguments[e]; for (var r in t) ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]); } return n; }, _extends.apply(null, arguments); }\nimport * as React from \"react\";\nfunction SvgPhoto(_ref, svgRef) {\n  let {\n    title,\n    titleId,\n    ...props\n  } = _ref;\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    width: 32,\n    height: 32,\n    viewBox: \"0 0 32 32\",\n    fill: \"none\",\n    xmlns: \"http://www.w3.org/2000/svg\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M24.0002 24.1L18 13.7L14.4 18.3L12 16.6L7.8 24.1H24.0002ZM9 8.1C8.5 8.1 8.1 8.5 8.1 9C8.1 9.5 8.5 9.9 9 9.9C9.5 9.9 9.9 9.5 9.9 9C9.9 8.5 9.5 8.1 9 8.1Z\",\n    stroke: \"#CDCCCA\",\n    strokeWidth: 1.5\n  })), _path2 || (_path2 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M1 1H31V31H1V1Z\",\n    stroke: \"#CDCCCA\",\n    strokeWidth: 1.5\n  })));\n}\nconst ForwardRef = /*#__PURE__*/React.forwardRef(SvgPhoto);\nexport default __webpack_public_path__ + \"static/media/photo.40a95fdf43c7006927ab2e696a9ff327.svg\";\nexport { ForwardRef as ReactComponent };","import type { PopperProps } from 'react-popper'\nimport styled, { css } from 'styled-components'\nimport { Colors } from 'utils/colors'\n\ntype TooltipProps = {\n  placement: PopperProps<undefined>['placement']\n  withPadding?: boolean\n  fluid?: boolean\n  width?: number\n}\n\nexport const Tooltip = styled.div<TooltipProps>(\n  ({ withPadding, fluid, width }) => css`\n    position: relative;\n    z-index: 1;\n    font-weight: 400;\n    font-size: 14px;\n    line-height: 24px;\n    border: 1px solid ${Colors.GS700};\n    background-color: ${Colors.GS1000};\n    color: ${Colors.GS100};\n\n    ${withPadding &&\n    css`\n      padding: 5px 8px;\n    `}\n\n    ${fluid &&\n    css`\n      width: auto;\n    `}\n\n    ${width\n      ? css`\n          width: ${width}px;\n        `\n      : css`\n          max-width: 250px;\n        `}\n  `\n)\n\nconst getArrowPosition = ({ placement }: ArrowProps) => {\n  if (placement?.includes('bottom')) {\n    return css`\n      top: -5px;\n    `\n  }\n\n  if (placement?.includes('top')) {\n    return css`\n      top: calc(100% - 4px);\n    `\n  }\n\n  if (placement?.includes('left')) {\n    return css`\n      right: -4px;\n    `\n  }\n\n  if (placement?.includes('right')) {\n    return css`\n      left: -5px;\n    `\n  }\n}\n\nconst getArrowBorder = ({ placement }: ArrowProps) => {\n  if (placement?.includes('bottom')) {\n    return css`\n      border-top: 1px solid ${Colors.GS700};\n      border-left: 1px solid ${Colors.GS700};\n    `\n  }\n\n  if (placement?.includes('top')) {\n    return css`\n      border-bottom: 1px solid ${Colors.GS700};\n      border-right: 1px solid ${Colors.GS700};\n    `\n  }\n\n  if (placement?.includes('left')) {\n    return css`\n      border-top: 1px solid ${Colors.GS700};\n      border-right: 1px solid ${Colors.GS700};\n    `\n  }\n\n  if (placement?.includes('right')) {\n    return css`\n      border-bottom: 1px solid ${Colors.GS700};\n      border-left: 1px solid ${Colors.GS700};\n    `\n  }\n}\n\ntype ArrowProps = {\n  placement: PopperProps<undefined>['placement']\n}\n\nexport const Arrow = styled.div<ArrowProps>`\n  ${getArrowPosition};\n\n  &,\n  &::before {\n    position: absolute;\n    width: 8px;\n    height: 8px;\n    z-index: -1;\n  }\n\n  &::before {\n    content: '';\n    transform: rotate(45deg);\n    background: ${Colors.GS1000};\n    ${getArrowBorder};\n  }\n`\n","import styled, { css } from 'styled-components'\nimport { Colors } from 'utils/colors'\n\nconst styles = `\n  height: 56px;\n  width: 100%;\n  padding-left: 16px;\n  padding-right: 16px;\n  border: 1px solid ${Colors.GS500};\n  font-size: 16px;\n  border-radius: 0;\n  appearance: none;\n  -moz-appearance: none;\n  -webkit-appearance: none;\n\n  ::placeholder {\n    /* Chrome, Firefox, Opera, Safari 10.1+ */\n    color: ${Colors.GS600};\n    opacity: 1; /* Firefox */\n  }\n\n  :-ms-input-placeholder {\n    /* Internet Explorer 10-11 */\n    color: ${Colors.GS600};\n  }\n\n  ::-ms-input-placeholder {\n    /* Microsoft Edge */\n    color: ${Colors.GS600};\n  }\n\n  &:focus {\n    outline: none;\n    border-color: ${Colors.GS1000};\n  }\n\n  &:disabled {\n    background: ${Colors.GS200};\n    border: 1px solid ${Colors.GS500};\n  }\n`\n\nexport const Container = styled.div<{ error?: boolean }>`\n  ${({ error }) =>\n    error &&\n    css`\n      input,\n      textarea {\n        border-color: ${Colors.R300};\n      }\n    `}\n`\n\nexport const Input = styled.input`\n  ${styles};\n`\n\nexport const Wrapper = styled.div<{\n  rightContent: boolean\n  leftContent: boolean\n  hasLabel?: boolean\n}>`\n  height: 100%;\n  width: 100%;\n  position: relative;\n\n  ${({ hasLabel }) =>\n    hasLabel &&\n    css`\n      input {\n        padding-top: 18px;\n      }\n    `}\n\n  ${({ rightContent }) =>\n    rightContent &&\n    css`\n      input {\n        padding-right: 48px;\n      }\n    `}\n\n  ${({ leftContent }) =>\n    leftContent &&\n    css`\n      input {\n        padding-left: 48px;\n      }\n    `}\n`\n\nexport const Tooltip = styled.div`\n  position: absolute;\n  right: 16px;\n  top: 50%;\n  transform: translateY(-50%);\n  z-index: 1;\n`\n\nconst sideContentStyles = css`\n  position: absolute;\n  top: 0;\n  height: 100%;\n  padding: 16px;\n  max-width: 50px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  overflow: hidden;\n`\n\nexport const RightContent = styled.div<{ clickable: boolean }>`\n  ${sideContentStyles};\n  right: 0;\n\n  ${({ clickable }) =>\n    clickable &&\n    css`\n      cursor: pointer;\n    `}\n`\n\nexport const LeftContent = styled.div`\n  ${sideContentStyles};\n  left: 0;\n`\n\nexport const Suffix = styled.div<{ rightContent?: boolean }>`\n  position: absolute;\n  bottom: 7px;\n  left: 17px;\n  font-size: inherit;\n  color: ${Colors.GS600};\n  pointer-events: none;\n  white-space: nowrap;\n  width: calc(100% - 34px);\n  overflow: hidden;\n\n  ${({ rightContent }) =>\n    rightContent &&\n    css`\n      width: calc(100% - 65px);\n    `}\n  span {\n    visibility: hidden;\n  }\n`\n\nexport const Label = styled.label<{\n  hasValue?: boolean\n  size?: 'small' | 'medium' | 'large'\n  leftSpacing?: boolean\n  rightSpacing?: boolean\n  disabled?: boolean\n}>`\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100%;\n  color: ${Colors.GS600};\n  pointer-events: none;\n  font-size: 16px;\n  padding-left: 16px;\n  padding-right: 16px;\n  white-space: nowrap;\n\n  user-select: none;\n\n  ${({ hasValue }) => css`\n    height: 56px;\n    line-height: 56px;\n\n    ${hasValue &&\n    css`\n      font-size: 12px;\n      line-height: 34px;\n    `}\n  `}\n\n  ${({ size, hasValue }) =>\n    size === 'medium' &&\n    css`\n      height: 48px;\n      line-height: 48px;\n\n      ${hasValue &&\n      css`\n        font-size: 12px;\n        line-height: 30px;\n      `}\n    `}\n\n  ${({ size, hasValue }) =>\n    size === 'small' &&\n    css`\n      height: 40px;\n      line-height: 40px;\n\n      ${hasValue &&\n      css`\n        display: none;\n      `}\n    `}\n\n  ${({ disabled }) =>\n    disabled &&\n    css`\n      color: ${Colors.GS600};\n    `}\n\n  ${({ leftSpacing }) =>\n    leftSpacing &&\n    css`\n      padding-left: 48px;\n    `}\n\n  ${({ rightSpacing }) =>\n    rightSpacing &&\n    css`\n      padding-right: 48px;\n    `}\n`\n\nexport const Error = styled.p`\n  font-size: 14px;\n  line-height: 150%;\n  color: ${Colors.R300};\n  margin-top: 4px;\n`\n\nexport const Message = styled.p`\n  font-size: 14px;\n  line-height: 150%;\n  color: ${Colors.GS550};\n  margin-top: 4px;\n`\n","import { useState } from 'react'\nimport { ReactComponent as QuestionMark } from './assets/question-mark.svg'\nimport { Tooltip } from '../Tooltip'\nimport * as S from './styled'\nimport type { FormInputProps } from './types'\n\nexport const Input = <TFormValues extends Record<string, unknown>>({\n  name,\n  clean,\n  value,\n  isSubmitted,\n  autocomplete,\n  register,\n  rules,\n  error,\n  errors,\n  className,\n  maxLength,\n  label,\n  type = 'text',\n  tooltip,\n  leftContent,\n  rightContent,\n  tooltipWidth = 250,\n  message,\n  suffix,\n  disabled,\n  required = false,\n  onRightContentClick,\n  onChange,\n  onBlur,\n  onFocus,\n  onKeyDown,\n  onPaste,\n  ...props\n}: FormInputProps<TFormValues>): JSX.Element => {\n  const [isFocused, setIsFocused] = useState(false)\n\n  const errorMessage = (errors && (errors[name]?.message as unknown as string)) || error\n  const hasError = !!errorMessage\n  const hasValue = !!value?.length\n\n  const handleOnBlur = () => {\n    onBlur && onBlur()\n    setIsFocused(false)\n  }\n\n  const handleOnFocus = () => {\n    onFocus && onFocus()\n    setIsFocused(true)\n  }\n\n  const renderInput = () => {\n    if (clean) {\n      return (\n        <S.Input\n          autoComplete={autocomplete}\n          name={name}\n          value={value}\n          type={type}\n          aria-invalid={hasError}\n          maxLength={maxLength}\n          disabled={disabled}\n          required={required}\n          onChange={onChange}\n          onFocus={handleOnFocus}\n          onBlur={handleOnBlur}\n          onKeyDown={onKeyDown}\n          onPaste={onPaste}\n        />\n      )\n    }\n\n    return (\n      <S.Input\n        autoComplete={autocomplete}\n        name={name}\n        aria-invalid={hasError}\n        maxLength={maxLength}\n        disabled={disabled}\n        type={type}\n        {...props}\n        {...(register && register(name, rules))}\n        required={required}\n        onFocus={handleOnFocus}\n        onBlur={handleOnBlur}\n        onKeyDown={onKeyDown}\n        onPaste={onPaste}\n      />\n    )\n  }\n\n  return (\n    <S.Container error={hasError}>\n      <S.Wrapper\n        rightContent={!!tooltip?.length || !!rightContent}\n        leftContent={!!leftContent}\n        hasLabel={!!label}\n      >\n        {label && (\n          <S.Label\n            leftSpacing={!!leftContent}\n            rightSpacing={!!tooltip?.length || !!rightContent}\n            hasValue={hasValue || isFocused}\n          >\n            {label}\n          </S.Label>\n        )}\n        {renderInput()}\n        {!!suffix?.length && !!value && !!value.length && (\n          <S.Suffix rightContent={!!tooltip?.length}>\n            <span>{value}</span>\n            {suffix}\n          </S.Suffix>\n        )}\n        {tooltip?.length && !rightContent && (\n          <S.Tooltip>\n            <Tooltip placement=\"top\" width={tooltipWidth} reference={<QuestionMark />}>\n              {tooltip}\n            </Tooltip>\n          </S.Tooltip>\n        )}\n        {leftContent && <S.LeftContent>{leftContent}</S.LeftContent>}\n        {rightContent && (\n          <S.RightContent clickable={!!onRightContentClick} onClick={onRightContentClick}>\n            {rightContent}\n          </S.RightContent>\n        )}\n      </S.Wrapper>\n      {message && <S.Message>{message}</S.Message>}\n      {!!errorMessage?.length && <S.Error>{errorMessage}</S.Error>}\n    </S.Container>\n  )\n}\n\nInput.Error = S.Error\nInput.Label = S.Label\nInput.Message = S.Message\n","import styled from 'styled-components'\nimport { Colors } from 'utils/colors'\nimport type { LoaderProps } from './Loader'\n\nconst colorsMap: Record<NonNullable<LoaderProps['appearance']>, string> = {\n  primary: Colors.GS1000,\n  secondary: Colors.GS0,\n}\n\nexport const Wrapper = styled.div<{\n  appearance?: LoaderProps['appearance']\n}>`\n  > svg {\n    animation: 1.4s ease-in-out -1.05s infinite normal both running rotation;\n\n    path {\n      stroke: ${({ appearance = 'primary' }) => colorsMap[appearance]};\n    }\n  }\n\n  @keyframes rotation {\n    from {\n      transform: rotate(0deg);\n    }\n\n    to {\n      transform: rotate(359deg);\n    }\n  }\n`\n","import styled from 'styled-components'\nimport { mediaQueries } from '../../../../utils/breakpoints'\n\nexport const Container = styled.div`\n  padding: 0 16px;\n  width: 100%;\n  height: 100%;\n  display: flex;\n  align-items: center;\n  gap: 10px;\n  cursor: pointer;\n`\n\nexport const Image = styled.div`\n  height: 32px;\n  width: 32px;\n  border-radius: 100%;\n  overflow: hidden;\n  flex-shrink: 0;\n\n  img {\n    width: 100%;\n    height: 100%;\n    object-fit: cover;\n  }\n\n  ${mediaQueries('laptop')} {\n    height: 36px;\n    width: 36px;\n  }\n`\n\nexport const Name = styled.p`\n  font-size: 16px;\n  overflow: hidden;\n  white-space: nowrap;\n  text-overflow: ellipsis;\n`\n","import styled from 'styled-components';\nimport { routing } from '../../../../routing'\nimport { mediaQueries } from 'utils/breakpoints'\nimport { Colors } from '../../../../utils/colors'\n\nconst PageWrapper = styled.div`\n  display: flex;\n  margin: 0 auto;\n  font-family: Arial, sans-serif;\n`;\n\nconst LeftColumn = styled.div`\n  flex: 1;\n  display: flex;\n  flex-direction: column;\n  width: calc(100vw - 580px);\n  background-color: ${Colors.GS200};\n`;\n\nconst RightColumn = styled.div`\n  flex: 1;\n`;\n\nconst Header = styled.div`\n  position: absolute;\n  top: 0;\n  left: 0;\n  height: 48px;\n  padding: 0 20px;\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  z-index: 1;\n\n  ${mediaQueries('laptop')} {\n    height: 64px;\n    padding: 0 32px;\n  }\n`;\n\nexport const LogoLink = styled.a`\n  position: relative;\n  width: 120px;\n\n  ${mediaQueries('laptop')} {\n    width: 140px;\n    top: -5px;\n  }\n`\n\nconst ContentArea = styled.main`\n  overflow-y: auto;\n  height: 100vh;\n`;\n\nexport const Layout = (props: { logo: React.ReactNode, left: React.ReactNode, right: React.ReactNode}) => {\n  return (\n    <PageWrapper>\n      <LeftColumn>\n        <ContentArea>\n          <Header>\n            <LogoLink href={routing.homepage}>\n              {props.logo}\n            </LogoLink>\n          </Header>\n          {props.left}\n        </ContentArea>\n      </LeftColumn>\n      <RightColumn>\n        {props.right}\n      </RightColumn>\n    </PageWrapper>\n  );\n};","import styled from 'styled-components'\nimport { Colors } from '../../../../../utils/colors'\nimport PhilMainImage from '../assets/pdf/main.png';\nimport PhilLeftImage from '../assets/pdf/left.png';\nimport PhilRightImage from '../assets/pdf/right.png';\nimport YetchMainImage from '../assets/ytc/main.png';\nimport YetchLeftImage from '../assets/ytc/left.png';\nimport YetchRightImage from '../assets/ytc/right.png';\nimport HarryMackMainImage from '../assets/hmk/main.png';\nimport HarryMackLeftImage from '../assets/hmk/left.png';\nimport HarryMackRightImage from '../assets/hmk/right.png';\nimport { useEffect, useState } from 'react';\n\nconst Footer = styled.footer`\n  position: sticky;\n  bottom: 40px;\n  margin-right: 40px;\n  display: flex;\n  text-align: center;\n  justify-content: right;\n  align-items: center;\n`;\n\nconst CarouselDot = styled.div<{ active?: boolean }>`\n  width: 8px;\n  height: 8px;\n  border-radius: 50%;\n  background-color: ${({ active }) => active ? Colors.GS1000 : Colors.GS500};\n`;\n\nconst CarouselWrapper = styled.div`\n  width: 100%;\n  height: 100vh;\n  overflow-y: auto;\n`;\n\nconst ContentWrapper = styled.div`\n  flex: 1;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  padding: 80px;\n`;\n\nconst creators = [\n  {\n    text: 'Phil DeFranco powers his shop with Fourthwall',\n    image: PhilMainImage,\n    left: PhilLeftImage,\n    right: PhilRightImage,\n  },\n  {\n    text: 'Yetch powers his shop with Fourthwall',\n    image: YetchMainImage,\n    left: YetchLeftImage,\n    right: YetchRightImage,\n  },\n  {\n    text: 'Harry Mack powers his shop with Fourthwall',\n    image: HarryMackMainImage,\n    left: HarryMackLeftImage,\n    right: HarryMackRightImage,\n  }\n]\n\nconst CarouselContainer = styled.div`\n  width: 100%;\n  height: 690px;\n  overflow: hidden;\n  position: relative;\n`;\n\nconst CarouselTrack = styled.div<{ translateX: number }>`\n  display: flex;\n  transition: transform 0.5s ease-in-out;\n  transform: translateX(${props => props.translateX}px);\n`;\n\nexport const CreatorCarousel = () => {\n  const [currentIndex, setCurrentIndex] = useState(0);\n\n  useEffect(() => {\n    const interval = setInterval(() => {\n      setCurrentIndex((prevIndex) => (prevIndex + 1) % creators.length);\n    }, 2000);\n    return () => clearInterval(interval);\n  }, []);\n\n  return <CarouselWrapper>\n    <ContentWrapper>\n      <CarouselContainer>\n        <CarouselTrack translateX={currentIndex * -800}>\n\n          {\n            creators.map((creator, index) => (\n              <CreatorSlide image={creator.image} left={creator.left} right={creator.right} text={creator.text}/>\n            ))\n          }\n        </CarouselTrack>\n      </CarouselContainer>\n    </ContentWrapper>\n    <Footer>\n      <div style={{ display: 'flex', justifyContent: 'center', gap: '10px' }}>\n        <CarouselDot active={currentIndex === 0} />\n        <CarouselDot active={currentIndex === 1} />\n        <CarouselDot active={currentIndex === 2} />\n      </div>\n    </Footer>    \n  </CarouselWrapper>\n}\n\ntype Creator = {\n  text: string;\n  image: string;\n  left: string;\n  right: string;\n}\n\nfunction CreatorSlide(creator: Creator) {\n  return <div style={{display: 'flex', justifyContent: 'center', alignItems: 'center', minWidth: '800px'}}>\n    <div style={{position: 'relative', \n      backgroundImage: `url(${creator.image})`,\n      backgroundSize: 'cover',\n      backgroundPosition: 'center',\n      width: '540px', height: '640px'}}>\n      <img \n        src={creator.left}\n        style={{\n        position: 'absolute', \n        left: '-50px',\n        top: '120px',\n        width: '260px', \n        height: '320px',}} />\n      <img \n        src={creator.right}\n        style={{\n        position: 'absolute', \n        left: '350px',\n        top: '220px',\n        width: '260px', \n        height: '320px',}} />\n    </div>\n  </div>\n}\n","import { Button } from \"components/Button\";\nimport { SocialButton } from \"components/SocialButton\";\nimport { ReactComponent as EmailIcon } from '../../../../../assets/email.svg'\nimport { useKeycloakContext } from \"../../../kcContext\"\nimport { RegisterNewKcContext } from \"../../../kcContext.types\"\nimport { getSocialButtons } from \"../../utils/getSocialProviders\"\nimport styled from 'styled-components'\nimport { Colors } from \"utils/colors\";\nimport { ButtonClean } from \"components/ButtonClean\";\n\nconst SignUpSection = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 24px;\n`;\n\nconst ButtonsSection = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 16px;\n`;\n\nexport const Note = styled.h1`\n  font-size: 12px;\n  line-height: 130%; /* 15.6px */\n  letter-spacing: 0.24px;\n  color: ${Colors.GS600};\n\n  a {\n    text-decoration: underline;\n  }\n`\n\nconst getSignUpWithEmailLink = (registrationActionUrl: string, params: URLSearchParams) => {\n  try {\n    const signUpWithEmailLink = new URL(registrationActionUrl)\n\n    // @ts-ignore\n    for (const [key, value] of params) {\n      signUpWithEmailLink.searchParams.append(key, value)\n    }\n\n    return signUpWithEmailLink\n  } catch (e) {\n    return '';\n  }\n}\n\nexport const StartNow = () => {\n  const { kcContext } = useKeycloakContext<RegisterNewKcContext>()\n  const socialButtons: any[] = getSocialButtons(\n    kcContext.social.providers,\n    kcContext.registrationType,\n    kcContext.client.clientId,\n  )\n  const host =\n    kcContext.env !== 'production' ? 'https://staging.fourthwall.com' : 'https://fourthwall.com'\n\n  const params = new URLSearchParams(location.search)\n  const signUpWithEmailLink = getSignUpWithEmailLink(kcContext.url.registrationAction, params)\n\n  return <div style={{\n    display: 'flex',\n    flexDirection: 'column',\n    justifyContent: 'space-between',\n    padding: '70px',\n    height: '100%'\n  }}>\n    <SignUpSection>\n      <h2>Start now</h2>\n      <ButtonsSection>\n        {socialButtons.map((socialButton) => {\n          if (!socialButton.loginUrl) return null\n\n          return (\n            <SocialButton\n              key={socialButton.platform}\n              platform={socialButton.platform}\n              href={socialButton.loginUrl}\n            >\n              {socialButton.label}\n            </SocialButton>\n          )\n        })}\n        <Button appearance=\"secondary\" size=\"large\" href={signUpWithEmailLink}>\n          <EmailIcon style={{ marginRight: 12 }} /> Sign up with email\n        </Button>\n      </ButtonsSection>\n      <div>Already have an account? <a href=\"#\">Login</a></div>\n    </SignUpSection>\n    <div style={{\n      display: 'flex',\n      flexDirection: 'column',\n      gap: '3px'\n    }}>\n      <Note>\n        By proceeding you agree to{' '}\n        <ButtonClean href={`${host}/terms-of-service/`} target=\"_blank\">\n          Terms of service\n        </ButtonClean>{' '}\n        and {' '}\n        <ButtonClean href={`${host}/privacy-policy/`} target=\"_blank\">\n          Privacy policy\n        </ButtonClean>\n        .\n      </Note>\n      <Note>\n        Are you an agency or a manager?{' '}\n        <ButtonClean\n          href={kcContext.fwUrl?.requestAnInvitationUrl}\n          analytics=\"signupAsAgencyOrManager\"\n        >\n          Fill our request form\n        </ButtonClean>\n      </Note>\n    </div>\n  </div>\n}\n","import { Layout } from './Layout'\nimport { CreatorCarousel } from './components/CreatorCarousel'\nimport { StartNow } from './components/StartNow'\nimport LogoSVG from './assets/logo.svg'\nimport styled from 'styled-components'\n\nexport const Logo = styled.img`\n  width: auto;\n  height: 20px;\n  object-fit: cover;\n`;\n\nconst RegisterNew = () => {\n  return <Layout \n    logo={\n      <Logo src={LogoSVG} />\n    }\n    left={\n      <CreatorCarousel />\n    } \n    right={\n      <StartNow />\n    }\n  />\n}\n\nexport default RegisterNew\n","import styled, { keyframes } from 'styled-components'\nimport R11 from '../assets/splash/r11.png'\nimport R12 from '../assets/splash/r12.png'\nimport R13 from '../assets/splash/r13.png'\nimport R14 from '../assets/splash/r14.png'\nimport R21 from '../assets/splash/r21.png'\nimport R22 from '../assets/splash/r22.png'\nimport R23 from '../assets/splash/r23.png'\nimport R24 from '../assets/splash/r24.png'\nimport R31 from '../assets/splash/r31.png'\nimport R32 from '../assets/splash/r32.png'\nimport R33 from '../assets/splash/r33.png'\nimport R34 from '../assets/splash/r34.png'\n\nconst scroll = keyframes`\n  0% { transform: translateX(-25%); }\n  100% { transform: translateX(0%); }\n`;\n\nconst ViewPort = styled.div`\n  width: 100%;\n  height: 100vh;\n  overflow: hidden;\n`;\n\nconst Container = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  background-color: #f0f0f0;\n  margin-top: -100px;\n  transform: rotate(-30deg);\n  width: 100%;\n  height: 100vh;\n`;\n\nconst Row = styled.div<{ direction: 'left' | 'right', speed: number }>`\n  display: flex;\n  margin-top: 32px;\n  width: max-content;\n  animation: ${scroll} ${props => props.speed}s linear infinite;\n  animation-direction: ${props => props.direction === 'left' ? 'reverse' : 'normal'};\n`;\n\nconst ImageWrapper = styled.div<{ direction: 'left' | 'right' }>`\n  width: 500px;\n  height: 340px;\n  margin: 0 10px;\n  overflow: hidden;\n  border-radius: 8px;\n  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);\n  transition: transform 0.3s ease;\n\n  &:hover {\n    transform: scale(1.05);\n  }\n`;\n\nconst Image = styled.img`\n  width: 100%;\n  height: 100%;\n  object-fit: cover;\n`;\n\nconst SlashWrapper = styled.div`\n  width: 100%;\n  height: 100vh;\n  overflow-y: auto;\n`;\n\nconst topRow = [R11, R12, R13, R14, R11, R12, R13, R14, R11, R12, R13, R14, R11, R12, R13, R14];\nconst middleRow = [R21, R22, R23, R24, R21, R22, R23, R24, R21, R22, R23, R24, R21, R22, R23, R24];\nconst bottomRow = [R31, R32, R33, R34, R31, R32, R33, R34, R31, R32, R33, R34, R31, R32, R33, R34];\n\nexport const ImageSplash = () => {\n    return <ViewPort>\n      <Container>\n        <Row direction=\"left\" speed={50}>\n          {topRow.map((img, index) => (\n            <ImageWrapper key={index} direction=\"left\">\n              <Image src={img} alt={`Image ${index}`} />\n            </ImageWrapper>\n          ))}\n        </Row>\n        <Row direction=\"right\" speed={40}>\n          {middleRow.map((img, index) => (\n            <ImageWrapper key={index} direction=\"right\">\n              <Image src={img} alt={`Image ${index + topRow.length}`} />\n            </ImageWrapper>\n          ))}\n        </Row>\n        <Row direction=\"left\" speed={40}>\n          {bottomRow.map((img, index) => (\n            <ImageWrapper key={index} direction=\"left\">\n              <Image src={img} alt={`Image ${index + topRow.length + middleRow.length}`} />\n            </ImageWrapper>\n          ))}\n        </Row>\n      </Container>\n    </ViewPort>\n}\n","import { Input } from \"components/Input\"\nimport { useForm } from \"react-hook-form\"\nimport { ReactComponent as YouTubeLogo } from '../../../../../components/PreOnboardingForm/assets/yt.svg'\nimport { ReactComponent as TwitchLogo } from '../../../../../components/PreOnboardingForm/assets/twitch.svg'\nimport { ReactComponent as TikTokLogo } from '../../../../../components/PreOnboardingForm/assets/tiktok.svg'\nimport { ReactComponent as InstagramLogo } from '../../../../../components/PreOnboardingForm/assets/instagram.svg'\nimport { ReactComponent as PlusIcon } from '../assets/plus.svg'\nimport { Colors } from \"utils/colors\"\nimport styled from 'styled-components'\nimport { SplashAutocomplete } from \"./SplashAutocomplete\"\nimport { Button } from \"components/Button\"\nimport { ButtonClean } from \"components/ButtonClean\"\n\ntype FormValues = {\n  name: string\n  youtube?: string\n  twitch?: string\n  tiktok?: string\n  instagram?: string\n}\n\nexport const EmptyState = styled.div`\n  font-size: 16px;\n  line-height: 150%;\n\n  span {\n    font-size: 14px;\n    color: ${Colors.GS600};\n    font-weight: 500;\n  }\n`\n\n\nexport const EnterDetails = () => {\n  const {\n    register,\n    formState: { errors, isSubmitted, isSubmitting, submitCount, isDirty, isValid },\n    control,\n    watch,\n    handleSubmit,\n    reset,\n    setValue,\n    setError,\n    trigger,\n    clearErrors,\n  } = useForm<FormValues>({\n    defaultValues: {\n      name: '',\n      youtube: '',\n    },\n    mode: 'onSubmit',\n  })\n\n  const values = {\n    name: watch('name'),\n    youtube: watch('youtube'),\n    twitch: watch('twitch'),\n    tiktok: watch('tiktok'),\n    instagram: watch('instagram'),\n  }\n\n\n  return <div style={{\n    display: 'flex',\n    flexDirection: 'column',\n    justifyContent: 'space-between',\n    padding: '70px',\n    height: '100%'\n  }}>\n    <div style={{\n        display: 'flex',\n        flexDirection: 'column',\n        gap: '24px'\n    }}>\n      <h2>Enter your details</h2>\n      <div style={{\n        display: 'flex',\n        flexDirection: 'column',\n        gap: '32px'\n      }}>\n        <Input\n          name=\"name\"\n          label={`Your name/nickname`}\n          value={values.name}\n          register={register}\n          errors={errors}\n          disabled={isSubmitting}\n          rules={{\n            required: {\n              value: true,\n              message: `This field is required.`,\n            },\n          }}\n          tooltip={`Enter your name.`}\n        />\n        <div style={{\n          display: 'flex',\n          flexDirection: 'column',\n          gap: '16px'\n        }}>\n          <div style={{\n            display: 'flex',\n            flexDirection: 'column',\n            gap: '4px'\n          }}>\n            <b>Enter your social channels</b>\n            <p style={{\n              color: Colors.GS600,\n            }}>This helps us personalize your experience</p>\n          </div>\n          <SplashAutocomplete \n            platform=\"youtube\"\n            label={`YouTube channel (e.g. MKBHD)`}\n            logo={<YouTubeLogo />}\n            disabled={isSubmitting}\n            setValue={(v) => setValue('youtube', v)}\n          />\n          <SplashAutocomplete\n            platform=\"twitch\"\n            label=\"Twitch channel (e.g. willneff)\"\n            logo={<TwitchLogo />}\n            disabled={isSubmitting}\n            setValue={(v) => setValue('twitch', v)}\n          />\n          <SplashAutocomplete\n            platform=\"twitch\"\n            label=\"TikTok account (e.g. @mad_mitch)\"\n            logo={<TikTokLogo />}\n            disabled={isSubmitting}\n            setValue={(v) => setValue('tiktok', v)}\n          />\n          <SplashAutocomplete\n            platform=\"instagram\"\n            label=\"Instagram profile (e.g. madsmitch)\"\n            logo={<InstagramLogo />}\n            disabled={isSubmitting}\n            setValue={(v) => setValue('instagram', v)}\n          />\n          <div>\n            <ButtonClean href=\"#\">\n              <div style={{\n                display: 'flex',\n                gap: '8px',\n                color: Colors.GS600,\n                textDecoration: 'none',\n              }}><PlusIcon /> Add another channel</div>\n            </ButtonClean>\n          </div>\n        </div>\n        <div>\n          <Button appearance=\"primary\" size=\"large\" fullwidth >\n            Continue\n          </Button>\n        </div>\n      </div>\n    </div>\n  </div>\n}\n","import type { RegisterKcContext } from '../../kcContext.types'\nimport { useKeycloakContext } from '../../kcContext'\nimport { Layout } from './Layout'\nimport styled from 'styled-components'\nimport { ImageSplash } from './components/ImageSplash'\nimport { EnterDetails } from './components/EnterDetails'\nimport LogoSVG from './assets/fw.svg';\n\nexport const Logo = styled.img`\n  width: auto;\n  height: 20px;\n  object-fit: cover;\n`;\n\nconst PreOnboardingNew = () => {\n  const { kcContext } = useKeycloakContext<RegisterKcContext>()\n  return <Layout \n    logo={\n      <Logo src={LogoSVG} />\n    }\n    left={\n      <ImageSplash />\n    } \n    right={\n      <EnterDetails />\n    }\n  />\n}\n\nexport default PreOnboardingNew\n"],"names":[],"sourceRoot":""}