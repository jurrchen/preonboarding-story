{"version":3,"file":"537.f8291b4e.iframe.bundle.js","mappings":";;;;;;;;;;;;;;;AAqBA;;AAMA;AACA;AASA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;;AAEA;;AAIA;;;;AC5CA;;;;AAMA;;;;AAMA;;;;;;;;;AAWA;;AAIA;AACA;;;;AAMA;;;;AAMA;;;;;AAOA;;;;;;;;;;;AAWA;;;AAKA;AAGA;;;;AAIA;;;;AAIA;;;;;AAKA;;AAEA;AAGA;;;;;AAKA;;;;;AAKA;;;AAGA;;AAEA;AAGA;;;;;;;AAOA;;;;;;;;AAQA;;;;;AAKA;;AAEA;AAGA;;;;;AAKA;;;;;AAKA;;;AAGA;;AAEA;AAGA;;;;;;;AAOA;;;;;;;AAOA;;;;;;;;AAQA;;AAEA;AAGA;;;;;;AAMA;;;;;;AAMA;;;AAGA;;AAEA;AAGA;;;;;;;;AAQA;;;;;;;AAOA;;;;;;;;AAQA;AClNA;;;;;;;;;;ACCA;;;AAGA;;;;AAIA;;;;AAMA;;;;AAIA;;;;AAMA;;;;AAMA;;;;;;AAQA;;;;;;AC5CA;;;;;;;;;;AAYA;;;;;;AAMA;;AAIA;;;;;;;AASA","sources":["webpack://keycloakify-starter/./src/components/Skeleton/styled.ts","webpack://keycloakify-starter/./src/components/PhotoGrid/styled.ts","webpack://keycloakify-starter/./src/components/PhotoGrid/PhotoGrid.tsx","webpack://keycloakify-starter/./src/components/Navbar/styled.ts","webpack://keycloakify-starter/./src/keycloak-theme/login/Template.styled.ts"],"sourcesContent":["import styled, { css, keyframes } from 'styled-components'\nimport type { Dimension, Props } from './types'\nimport { Colors } from '../../utils/colors'\n\nconst getDimension = (dimension: Dimension, index: number) => {\n  if (typeof dimension === 'string') return dimension\n  if (typeof dimension === 'number') return `${dimension}px`\n\n  return dimension(index)\n}\n\nconst animationWave = keyframes`\n  0% {\n    background-position: 0% 50%;\n  }\n  50% {\n    background-position: 100% 50%;\n  }\n  100% {\n    background-position: 0% 50%;\n  }\n`\n\nexport const Skeleton = styled.div<{\n  gap: Props['gap']\n}>`\n  display: grid;\n  gap: ${({ gap }) => gap}px;\n`\n\nexport const Shape = styled.div<{\n  variant: Props['variant']\n  mainColor: string\n  $width: Dimension\n  $height: Dimension\n  index: number\n}>`\n  ${({ mainColor }) => css`\n    background: linear-gradient(-45deg, ${mainColor}, ${Colors.GS100}, ${mainColor});\n  `}\n\n  background-size: 300% 300%;\n  animation: ${animationWave} 2s ease-in-out infinite alternate;\n  ${({ index, $width, $height }) => css`\n    width: ${getDimension($width, index)};\n    height: ${getDimension($height, index)};\n  `}\n\n  ${({ variant }) =>\n    variant === 'circle' &&\n    css`\n      border-radius: 50%;\n    `}\n`\n","import { Skeleton } from 'components/Skeleton'\nimport styled, { css } from 'styled-components'\nimport { Colors } from '../../utils/colors'\nimport type { PhotoGridProps } from './PhotoGrid'\n\nexport const ImagesContainer = styled.div`\n  position: relative;\n  max-width: 558px;\n`\n\nexport const Image = styled.img`\n  width: 100%;\n  height: 100%;\n  object-fit: cover;\n`\n\nexport const MainImageContainer = styled.div`\n  width: 430px;\n  height: 527px;\n  position: relative;\n`\n\nexport const Loader = styled(Skeleton)<{ visible: boolean }>`\n  position: absolute;\n  width: 100%;\n  height: 100%;\n  left: 0;\n  top: 0;\n  pointer-events: none;\n  transition: opacity 0.2s ease-in-out;\n\n  ${({ visible }) =>\n    !visible &&\n    css`\n      opacity: 0;\n    `}\n`\n\nexport const TopImageContainer = styled.div`\n  width: 145px;\n  position: absolute;\n  display: block;\n`\n\nexport const BottomImageContainer = styled.div`\n  width: 160px;\n  position: absolute;\n  display: block;\n`\n\nexport const Footer = styled.footer`\n  font-size: 12px;\n  line-height: 16px;\n  letter-spacing: 0.24px;\n\n  color: ${Colors.GS1000};\n\n  a {\n    text-decoration-line: underline;\n  }\n\n  position: absolute;\n  top: 100%;\n  left: 132px;\n\n  padding: 16px 20px;\n`\n\nexport const Container = styled.div<{ variant: PhotoGridProps['variant'] }>`\n  padding: 32px 28px 76px 28px;\n\n  ${({ variant }) =>\n    variant === 1 &&\n    css`\n      ${TopImageContainer} {\n        display: none;\n      }\n\n      ${BottomImageContainer} {\n        display: none;\n      }\n\n      ${Footer} {\n        left: 0;\n        width: 100%;\n        padding: 12px 0;\n      }\n    `};\n\n  ${({ variant }) =>\n    variant === 2 &&\n    css`\n      ${TopImageContainer} {\n        top: -32px;\n        right: -28px;\n      }\n\n      ${BottomImageContainer} {\n        bottom: -76px;\n        left: -28px;\n      }\n\n      ${Footer} {\n        left: 132px;\n      }\n    `};\n\n  ${({ variant }) =>\n    variant === 3 &&\n    css`\n      ${TopImageContainer} {\n        right: auto;\n        left: -28px;\n        top: -41px;\n        width: 160px;\n      }\n\n      ${BottomImageContainer} {\n        left: auto;\n        right: -28px;\n        width: 145px;\n        height: 195px;\n        bottom: -68px;\n      }\n\n      ${Footer} {\n        left: auto;\n        right: 116px;\n        text-align: right;\n      }\n    `};\n\n  ${({ variant }) =>\n    variant === 4 &&\n    css`\n      ${TopImageContainer} {\n        top: -48px;\n        right: -55px;\n      }\n\n      ${BottomImageContainer} {\n        bottom: -92px;\n        left: 55px;\n      }\n\n      ${Footer} {\n        left: 205px;\n      }\n    `};\n\n  ${({ variant }) =>\n    variant === 5 &&\n    css`\n      ${TopImageContainer} {\n        right: auto;\n        left: -55px;\n        top: -48px;\n        width: 128px;\n      }\n\n      ${BottomImageContainer} {\n        left: auto;\n        right: 35px;\n        width: 180px;\n        bottom: -111px;\n      }\n\n      ${Footer} {\n        left: auto;\n        right: 216px;\n        text-align: right;\n        padding-top: 19px;\n        padding-left: 0;\n        padding-right: 15px;\n      }\n    `};\n\n  ${({ variant }) =>\n    variant === 6 &&\n    css`\n      ${TopImageContainer} {\n        right: auto;\n        top: -28px;\n        left: -56px;\n      }\n\n      ${BottomImageContainer} {\n        left: 70px;\n        bottom: -76px;\n        height: 198px;\n      }\n\n      ${Footer} {\n        left: 230px;\n      }\n    `};\n\n  ${({ variant }) =>\n    variant === 7 &&\n    css`\n      ${TopImageContainer} {\n        right: auto;\n        height: 100px;\n        width: 100px;\n        top: -25px;\n        left: -43px;\n      }\n\n      ${BottomImageContainer} {\n        left: auto;\n        right: -24px;\n        bottom: -80px;\n        width: 187px;\n      }\n\n      ${Footer} {\n        left: auto;\n        right: 167px;\n        text-align: right;\n        padding-top: 16px;\n        padding-left: 0;\n        padding-right: 16px;\n      }\n    `};\n`\n","import type { ReactNode } from 'react'\nimport { useState } from 'react'\nimport * as S from './styled'\n\nexport type PhotoGridProps = {\n  variant?: 1 | 2 | 3 | 4 | 5 | 6 | 7\n  mainImage?: string\n  topImage?: string\n  bottomImage?: string\n  isLoading?: boolean\n  footer?: ReactNode\n}\n\nexport const PhotoGrid = ({\n  variant = 1,\n  isLoading,\n  mainImage,\n  topImage,\n  bottomImage,\n  footer,\n}: PhotoGridProps) => {\n  const staticAssets = isLoading !== undefined\n  const [mainImageLoaded, setMainImageLoaded] = useState(staticAssets)\n  const [topImageLoaded, setTopImageLoaded] = useState(staticAssets)\n  const [bottomImageLoaded, setBottomImageLoaded] = useState(staticAssets)\n\n  return (\n    <S.Container variant={variant}>\n      <S.ImagesContainer>\n        <S.MainImageContainer>\n          <S.Image src={mainImage} onLoad={() => setMainImageLoaded(true)} />\n          <S.Loader visible={isLoading || !mainImageLoaded} />\n        </S.MainImageContainer>\n        {topImage && (\n          <S.TopImageContainer>\n            <S.Image src={topImage} onLoad={() => setTopImageLoaded(true)} />\n            <S.Loader visible={isLoading || !topImageLoaded} />\n          </S.TopImageContainer>\n        )}\n        {bottomImage && (\n          <S.BottomImageContainer>\n            <S.Image src={bottomImage} onLoad={() => setBottomImageLoaded(true)} />\n            <S.Loader visible={isLoading || !bottomImageLoaded} />\n          </S.BottomImageContainer>\n        )}\n        {footer && <S.Footer>{footer}</S.Footer>}\n      </S.ImagesContainer>\n    </S.Container>\n  )\n}\n","import styled from 'styled-components'\nimport { mediaQueries } from 'utils/breakpoints'\nimport { Colors } from '../../utils/colors'\n\nexport const Container = styled.nav`\n  position: fixed;\n  width: 100vw;\n  height: 48px;\n  left: 0;\n  top: 0;\n  padding: 0 20px;\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  background: ${Colors.GS0};\n  z-index: 1;\n\n  ${mediaQueries('laptop')} {\n    height: 64px;\n    padding: 0 32px;\n  }\n`\n\nexport const LogoLink = styled.a`\n  position: relative;\n  width: 120px;\n\n  ${mediaQueries('laptop')} {\n    width: 140px;\n    top: -5px;\n  }\n`\n\nexport const Logo = styled.img`\n  width: 100%;\n  height: auto;\n  object-fit: cover;\n`\n\nexport const LinksContainer = styled.ul`\n  display: flex;\n  align-items: center;\n  gap: 32px;\n`\n\nexport const Link = styled.a`\n  font-size: 16px;\n  font-weight: 600;\n  line-height: 150%;\n\n  &:hover {\n    color: ${Colors.B500};\n  }\n`\n","import styled from 'styled-components'\nimport { mediaQueries } from '../../utils/breakpoints'\n\nexport const Container = styled.div`\n  width: 100vw;\n  height: 100vh;\n  position: relative;\n`\n\nexport const Content = styled.div`\n  width: 100%;\n  min-height: 100%;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  margin: 0 auto;\n  padding: 96px 20px 48px;\n  max-width: 1124px;\n\n  ${mediaQueries('laptop')} {\n    height: 100%;\n    padding: 64px;\n    justify-content: space-between;\n    min-height: 890px;\n  }\n`\n\nexport const MainContent = styled.div`\n  width: 384px;\n`\n\nexport const AsideContent = styled.div`\n  display: none;\n  width: 486px;\n  padding: 48px 0;\n  align-items: center;\n  justify-content: center;\n\n  ${mediaQueries('laptop')} {\n    display: flex;\n  }\n`\n"],"names":[],"sourceRoot":""}